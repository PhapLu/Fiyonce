// Imports
import { useState, useRef, useEffect } from "react";
import { Link, useNavigate, useParams, useLocation, useOutletContext } from "react-router-dom";
import { useQuery } from "react-query";

// Resources
import { useModal } from "../../../contexts/modal/ModalContext";
import { isFilled } from "../../../utils/validator";
import { apiUtils } from "../../../utils/newRequest";
import { useAuth } from "../../../contexts/auth/AuthContext";

// Styling

export default function DeliverCommissionOrder() {
    // Return null if the commission order to be delivered is not specified
    const { userInfo, socket } = useAuth();
    const { setModalInfo } = useModal();

    const [errors, setErrors] = useState({});
    const [isSubmitDeliverCommissionOrderLoading, setIsSubmitDeliverCommissionOrderLoading] = useState(false);
    const [isDeliverCommissionOrderSuccess, setIsDeliverCommissionOrderSuccess] = useState(false);
    const [selectedReason, setSelectedReason] = useState("");
    const [otherReason, setOtherReason] = useState("");

    const navigate = useNavigate();
    const location = useLocation();

    // Toggle display modal form
    const closeDeliverCommissionOrderView = () => {
        if (location.pathname.includes("commission-market")) {
            navigate("/commission-market");
        } else {
            navigate("/order-history");
        }
    }

    const commissionOrderRef = useRef();
    useEffect(() => {
        let handler = (e) => {
            if (commissionOrderRef && commissionOrderRef.current && !commissionOrderRef.current.contains(e.target)) {
                closeDeliverCommissionOrderView();
            }
        };
        document.addEventListener("mousedown", handler);
        return () => {
            document.removeEventListener("mousedown", handler);
        };
    });

    const handleSubmit = async (e) => {
        e.preventDefault();
        setIsSubmitDeliverCommissionOrderLoading(true);

        try {
            console.log(commissionOrder._id)
            // const response = await apiUtils.patch(`/order/deliverOrder/${commissionOrder.orderId}`, fd);
            const response = await deliverCommissionOrderMutation.mutateAsync({ orderId: commissionOrder._id });
            if (response) {
                setModalInfo({
                    status: "success",
                    message: "ƒê√£ x√°c nh·∫≠n th·ª±c hi·ªán ƒë∆°n h√†ng",
                });
                closeDeliverCommissionOrderView();
            }

            // const senderId = userInfo._id;
            // const receiverId = commissionOrder.memberId._id;
            // const inputs2 = { receiverId, type: "deliverCommissionOrder", url: `/order-history` }
            // const response2 = await apiUtils.post(`/notification/createNotification`, inputs2);
            // const notificationData = response2.data.metadata.notification;
            // socket.emit('sendNotification', { senderId, receiverId, notification: notificationData, url: notificationData.url });
        } catch (error) {
            console.error("Failed to submit:", error);
            setErrors((prevErrors) => ({
                ...prevErrors,
                serverError: error.response?.data?.message,
            }));
        } finally {
            setIsSubmitDeliverCommissionOrderLoading(false);
        }
    };

    return (
        <div className="overlay">
            <div className="deliver-commission-order modal-form type-3 sm" ref={commissionOrderRef} onClick={(e) => { e.stopPropagation() }}>
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="2.5" stroke="currentColor" className="size-6 form__close-ic" onClick={() => {
                    closeDeliverCommissionOrderView();
                }}>
                    <path strokeLinecap="round" strokeLinejoin="round" d="M6 18L18 6M6 6l12 12" />
                </svg>
                <h2 className="form__title">Ho√†n t·∫•t ƒë∆°n h√†ng</h2>

                {
                    isDeliverCommissionOrderSuccess ? (
                        <p className="mt-8 mb-32 text-align-center">
                            Tadaaa, ch√∫c m·ª´ng b·∫°n ƒë√£ ho√†n th√†nh ƒë∆°n h√†ng cho kh√°ch v√† ƒë√≥ng g√≥p v√†o c√°c ho·∫°t ƒë·ªông c·∫£i thi·ªán b·ªØa ƒÉn cho tr·∫ª em v√πng cao c≈©ng nh∆∞ tr·ªìng th√™m c√¢y xanh. Pastal Team ch√∫c b·∫°n s·ªõm c√≥ nh·ªØng ƒë∆°n h√†ng k·∫ø ti·∫øp v√† lu√¥n ƒë·∫°t ƒë∆∞·ª£c tr·∫°ng th√°i t·ªët nh·∫•t khi l√†m vi·ªác tr√™n n·ªÅn t·∫£ng. <span className="fs-20">üéâ</span>.
                        </p>
                    ) : (
                        <>
                            <div className="form-field">
                                <p className="highlight-bg-text text-align-justify fs-13">
                                    N·∫øu kh√°ch h√†ng h√†i l√≤ng v·ªõi ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m v√† ch·ªçn "ƒê√£ nh·∫≠n ƒë∆∞·ª£c h√†ng", 95.5% gi√° tr·ªã ƒë∆°n h√†ng s·∫Ω ƒë∆∞·ª£c chuy·ªÉn v√†o t√†i kho·∫£n thanh to√°n m√† b·∫°n li√™n k·∫øt v·ªõi Pastal trong v√≤ng 24h. N·∫øu sau 07 ng√†y k·ªÉ t·ª´ khi ho√†n t·∫•t giao d·ªãch m√† kh√¥ng c√≥ ph·∫£n h·ªìi v√† b√°o c√°o vi ph·∫°m t·ª´ ph√≠a kh√°ch h√†ng, gi√° tr·ªã ƒë∆°n h√†ng s·∫Ω t·ª± ƒë·ªông ƒë∆∞·ª£c chuy·ªÉn v√†o t√†i kho·∫£n c·ªßa b·∫°n.
                                </p>
                            </div>
                            <div className="form-field">
                                <button
                                    type="submit"
                                    className="form-field__input btn btn-2 btn-md"
                                    onClick={handleSubmit}
                                    disabled={isSubmitDeliverCommissionOrderLoading}
                                >
                                    {isSubmitDeliverCommissionOrderLoading ? (
                                        <span className="btn-spinner"></span>
                                    ) : (
                                        "X√°c nh·∫≠n"
                                    )}
                                </button>
                            </div >
                        </>
                    )}
            </div >
        </div >
    );
}