// Imports
import { useState, useRef, useEffect } from "react";
import { Link, useNavigate, useParams, useLocation, useOutletContext } from "react-router-dom";
import { useQuery } from "react-query";

// Resources
import { useModal } from "../../../contexts/modal/ModalContext";
import { isFilled } from "../../../utils/validator";
import { apiUtils } from "../../../utils/newRequest";
import { useAuth } from "../../../contexts/auth/AuthContext";

// Styling

export default function DeliverCommissionOrder() {
    // Return null if the commission order to be delivered is not specified
    const { userInfo, socket } = useAuth();
    const { setModalInfo } = useModal();

    const [errors, setErrors] = useState({});
    const [isSubmitDeliverCommissionOrderLoading, setIsSubmitDeliverCommissionOrderLoading] = useState(false);
    const [selectedReason, setSelectedReason] = useState("");
    const [otherReason, setOtherReason] = useState("");

    // Toggle display modal form
    const commissionOrderRef = useRef();
    useEffect(() => {
        let handler = (e) => {
            if (commissionOrderRef && commissionOrderRef.current && !commissionOrderRef.current.contains(e.target)) {
                setShowDeliverCommissionOrder(false);
                setOverlayVisible(false);
            }
        };
        document.addEventListener("mousedown", handler);
        return () => {
            document.removeEventListener("mousedown", handler);
        };
    });

    const handleSubmit = async (e) => {
        e.preventDefault();
        setIsSubmitDeliverCommissionOrderLoading(true);

        try {
            console.log(commissionOrder._id)
            // const response = await apiUtils.patch(`/order/deliverOrder/${commissionOrder.orderId}`, fd);
            const response = await deliverCommissionOrderMutation.mutateAsync({ orderId: commissionOrder._id });
            if (response) {
                setModalInfo({
                    status: "success",
                    message: "ƒê√£ x√°c nh·∫≠n th·ª±c hi·ªán ƒë∆°n h√†ng",
                });
                setShowDeliverCommissionOrder(false);
                setOverlayVisible(false);
            }

            // const senderId = userInfo._id;
            // const receiverId = commissionOrder.memberId._id;
            // const inputs2 = { receiverId, type: "deliverCommissionOrder", url: `/order-history` }
            // const response2 = await apiUtils.post(`/notification/createNotification`, inputs2);
            // const notificationData = response2.data.metadata.notification;
            // socket.emit('sendNotification', { senderId, receiverId, notification: notificationData, url: notificationData.url });

        } catch (error) {
            console.error("Failed to submit:", error);
            setErrors((prevErrors) => ({
                ...prevErrors,
                serverError: error.response?.data?.message,
            }));
        } finally {
            setIsSubmitDeliverCommissionOrderLoading(false);
        }
    };

    return (
        <div className="overlay">
            <div className="deliver-commission-order modal-form type-3 sm" ref={commissionOrderRef} onClick={(e) => { e.stopPropagation() }}>
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="2.5" stroke="currentColor" className="size-6 form__close-ic" onClick={() => {
                    setShowDeliverCommissionOrder(false);
                    setOverlayVisible(false);
                }}>
                    <path strokeLinecap="round" strokeLinejoin="round" d="M6 18L18 6M6 6l12 12" />
                </svg>
                <h2 className="form__title">Ho√†n t·∫•t ƒë∆°n h√†ng</h2>
                <div className="form-field">
                    <p className="highlight-bg-text text-align-justify">
                        Khi kh√°ch h√†ng x√°c nh·∫≠n "ƒê√£ nh·∫≠n ƒë∆∞·ª£c h√†ng", b·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c ti·ªÅn th√π lao c·ªßa m√¨nh.
                        Sau 07 ng√†y k·ªÉ t·ª´ th·ªùi ƒëi·ªÉm ho√†n t·∫•t, n·∫øu kh√¥ng c√≥ b√°o c√°o vi ph·∫°m t·ª´ ph√≠a kh√°ch h√†ng th√¨ ti·ªÅn s·∫Ω ƒë∆∞·ª£c chuy·ªÉn v√†o t√†i kho·∫£n m√† b·∫°n li√™n k·∫øt v·ªõi Pastal.
                    </p>
                </div>

                <p className="mt-8 mb-32 text-align-center">
                    Pastal Team ch√∫c b·∫°n l√†m vi·ªác vui v·∫ª, gi·ªØ s·ª©c kh·ªèe v√† ƒë·∫°t ƒë∆∞·ª£c tr·∫°ng th√°i t·ªët nh·∫•t khi th·ª±c hi·ªán d·ªãch v·ª• tr√™n n·ªÅn t·∫£ng <span className="fs-20">üíù</span>.
                </p>
                <div className="form-field">
                    <button
                        type="submit"
                        className="form-field__input btn btn-2 btn-md"
                        onClick={handleSubmit}
                        disabled={isSubmitDeliverCommissionOrderLoading}
                    >
                        {isSubmitDeliverCommissionOrderLoading ? (
                            <span className="btn-spinner"></span>
                        ) : (
                            "X√°c nh·∫≠n"
                        )}
                    </button>
                </div>
            </div>
        </div>
    );
}